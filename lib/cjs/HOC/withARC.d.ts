import { ARCConfig } from "../types/config.types";
import { ComponentType } from "react";
import { ARCRootState } from "../types/connectors.types";
/**
 * Store Connector
 * @param {ARCConfig} config

 */
export declare function connectFn<Model>(config: ARCConfig<Model>): (store: ARCRootState, ownProps: object) => {
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
};
/**
 *
 * @param {ARCConfig} config
 * @return {function(Component)<ARCWrappedComponent>}
 */
export declare function withARC<Model>(config: ARCConfig<Model>): <T>(Wrapped: ComponentType<T>) => import("react-redux").ConnectedComponent<ComponentType<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>>, (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_1 ? { [k in keyof T_1]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k]; } : never) | (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_2 ? { [k_1 in keyof T_2]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_1]; } : never) | (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_3 ? { [k_2 in keyof T_3]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k_2]; } : never) | (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_4 ? { [k_3 in keyof T_4]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_3]; } : never) | (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_5 ? { [k_4 in keyof T_5]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k_4]; } : never) | (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_6 ? { [k_5 in keyof T_6]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_5]; } : never) | (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_7 ? { [k_6 in keyof T_7]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k_6]; } : never) | (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_8 ? { [k_7 in keyof T_8]: (import("react-redux").DistributiveOmit<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_7]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_9 ? { [k_8 in keyof T_9]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k_8]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_10 ? { [k_9 in keyof T_10]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_9]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_11 ? { [k_10 in keyof T_11]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k_10]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_12 ? { [k_11 in keyof T_12]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_11]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_13 ? { [k_12 in keyof T_13]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k_12]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_14 ? { [k_13 in keyof T_14]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_13]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>> extends infer T_15 ? { [k_14 in keyof T_15]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T>>)[k_14]; } : never) | (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>> extends infer T_16 ? { [k_15 in keyof T_16]: (import("react-redux").DistributiveOmit<import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>, Extract<"error", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"loaded", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"dispatch", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"Component", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"ARCConfig", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"model", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"syncing", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metas", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"isNew", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))> | Extract<"metaModel", (keyof T & (keyof T | keyof import("react").ClassAttributes<import("react").Component<T, any, any>>)) & ((keyof T | keyof import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>>) & ("key" | "ref" | keyof T))>> & object & import("react-redux").ConnectPropsMaybeWithoutContext<object & import("react").ClassAttributes<import("react").Component<import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, T | (import("react").ClassAttributes<import("react").Component<T, any, any>> & T)>, any, any>> & import("react-redux").Matching<{
    ARCConfig: ARCConfig<Model>;
    loaded: boolean;
    metaModel: import("..").ARCMetaModel<Model> | null;
    model: Model | null;
    error: any;
    syncing: boolean;
    metas: any;
    isNew: boolean;
    dispatch?: import("redux-thunk").ThunkDispatch<any, any, any>;
    Component?: React.ComponentType<any>;
} & import("react-redux").DispatchProp<import("redux").UnknownAction>, import("react").ClassAttributes<import("react").Component<T, any, any>> & T>>)[k_15]; } : never)>;
