import { ARCMetaCollectionMap, ARCMetaModel, ARCModel } from "../types/model.types";
import { ARCConfig } from "../types/config.types";
import { AnyProps, ComponentPropsWithRequiredModelParams } from "../types/components.types";
export declare function flatten<Model>(arcCollectionMap: ARCMetaCollectionMap<Model>, withMetas?: boolean): ARCModel<Model>[] | ARCMetaModel<Model>[];
export declare function extendWithDefaultProps<Model, P>(config: ARCConfig<Model>, ownProps: P): P;
export type ObjectValues<T> = T[keyof T];
export declare function extractParams(props?: string[], source?: AnyProps): {};
export declare function getParams<Model>(config: ARCConfig<Model>, source?: AnyProps): ComponentPropsWithRequiredModelParams;
export declare const changedProps: (prevProps: AnyProps, nextProps: AnyProps) => string[];
export declare function cleanParams(str: string): string;
export declare function stringIsReplaceable(str: string): boolean;
export declare function interpolate(str: string | null, params: object): string;
export declare function getDefaultConfig<Model, RequiredProps>(): ARCConfig<Model, RequiredProps>;
export declare const omit: (props: Record<string, any>, prop: string | string[]) => Record<string, any>;
export declare function initializeConfig<Model, RequiredProps>(config: ARCConfig<Model, RequiredProps>): ARCConfig<Model, RequiredProps>;
